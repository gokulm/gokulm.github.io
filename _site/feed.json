{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sidey",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "Simple and minimalistic jekyll blogging theme.",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "/2018/08/20/bananas",
            "title": "Bananas",
            "summary": null,
            "content_text": "A banana is an edible fruit – botanically a berry – produced by several kindsof large herbaceous flowering plants in the genus Musa.In some countries, bananas used for cooking may be called “plantains”,distinguishing them from dessert bananas. The fruit is variable in size, color,and firmness, but is usually elongated and curved, with soft flesh rich instarch covered with a rind, which may be green, yellow, red, purple, or brownwhen ripe.",
            "content_html": "<p>A banana is an edible fruit – botanically a berry – produced by several kindsof large herbaceous flowering plants in the genus Musa.</p><p>In some countries, bananas used for cooking may be called “plantains”,distinguishing them from dessert bananas. The fruit is variable in size, color,and firmness, but is usually elongated and curved, with soft flesh rich instarch covered with a rind, which may be green, yellow, red, purple, or brownwhen ripe.</p>",
            "url": "/2018/08/20/bananas",
            
            
            
            
            
            "date_published": "2018-08-20T00:00:00-05:00",
            "date_modified": "2018-08-20T00:00:00-05:00",
            
                "author": "jill"
            
        },
    
        {
            "id": "/2010/11/05/lego-bot",
            "title": "LEGO Bot",
            "summary": "A LEGO Bot built using LEGO Mindstorms 2.0 and Microsoft Robotics Developer Studio (MRDS)",
            "content_text": "VideoSource CodeHere is the GitHub RepositoryRequirements:  LEGO Mindstorms NXT 2.0  Microsoft Robotics Developer Studio (the link points to the latest version, please refer the code to the appropriate version)  Network/IP Camera (I used my iPhone with WiFi Camera app installed on it)  WPF Dashboard ControlsHow to set it up?Create a MRDS Service and add the partners - NxtDrive and NxtBattery.  Adding the partners will automatically declare and instantiate an object for BatteryOperations and an object for DriveOperations. Please add one more for DriveOperations as the code mentioned below./// &lt;summary&gt;/// NxtBattery partner/// &lt;/summary&gt;[Partner(\"NxtBattery\", Contract = battery.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]battery.BatteryOperations _nxtBatteryPort = new battery.BatteryOperations();/// &lt;summary&gt;/// NxtDrive partner/// &lt;/summary&gt;[Partner(\"NxtDrive\", Contract = drive.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]drive.DriveOperations _nxtDrivePort = new drive.DriveOperations();drive.DriveOperations _nxtDriveNotify = new drive.DriveOperations();Add a new class library project to the solution, and add an interface to it. This project needs to be referenced in the MRDS Service and the WPF UI projects (will explain the UI project later).public interface IMyLegoCarService{    double GearPower { get; set; }    long LeftEncoderCurrent { get; set; }    long RightEncoderCurrent { get; set; }    double LeftPowerCurrent { get; set; }    double RightPowerCurrent { get; set; }    double BatteryPower { get; set; }    void Drive(DriveAction driveDirection);    void StopEngine();}Change the MRDS Service in such a way that it implements this interface. Values for all the properties but the first property (GearPower) will be set in the service, and they will be retrieved and used in the UI layer.Now, add a new WPF project. VS will choose x86 as the targeted platform by default, change it to “Any CPU”. Declare a property named Service of type IMyLegoCarService, and add a constructor, something like this.public Dashboard(IMyLegoCarService service) : this(){    Service = service;    Service.GearPower = 0;    brsr_ipcamera.Navigate(new Uri(\"http://ipoftheiphoneorthewebserver/iphonecamera/index.htm\"));    UpdateInitialOdometer();    uiTimer = new DispatcherTimer();    uiTimer.Interval = TimeSpan.FromSeconds(1);    uiTimer.Tick += uiTimer_Tick;    uiTimer.Start();}This constructor should be called from the Service’s constructor, so that the service and the UI will be on the same thread. Here “brsr_ipcamera” is the web browser control to display the ip camera’s image/video (in my case my iphone). I added an html page to my webserver displaying only the video from the camera. Add a timer control to display the information retrieved from the service periodically. Here I’ve used WPF Dashboard Controls’ dial controls as speedometers (for left motor front, left motor reverse, right motor front and right motor reverse), odometer control as odometer and progress bar control as fuel gauge.  Left/Right Power Current properties were used to initialize the speedometers. Left/Right Encoder properties were used to initialize the odometer, these properties basically give us the degrees that the servo motors rotated. Using the formula: distance = Convert.ToInt32(Math.Abs(currentEncoderCurrent) / 360 * 2 * 3.14 * 0.75, we can calculate the distance covered. Here, pi = 3.14 and 0.75 is the radius of the wheels.Coming back to the service. Declare and/or instantiate the following classes.wpf.WpfServicePort _wpfServicePort;drive.SetDriveRequest _nxtSetDriveRequest = new drive.SetDriveRequest();battery.BatteryState _nxtBatteryState;WpfServicePort is used toinvoke the WPF UI, SetDriveRequest to rotate the motors and the BatteryState to get the battery information.Add a port named “TimerTick” to the service types similar to the automatically created ports “Get”, “Subscribe” etc. Now your serviceoperations class declaration will be something like this -[ServicePort]public class MyLegoCarServiceOperations : PortSet&lt;DsspDefaultLookup, DsspDefaultDrop, Get, Subscribe, TimerTick&gt;{}public class TimerTick : Update&lt;TimerTickRequest, PortSet&lt;DefaultUpdateResponseType, Fault&gt;&gt;{    public TimerTick()        : base(new TimerTickRequest())    {    }} [DataContract]public class TimerTickRequest{}Modify the service’s start method something like this -protected override void Start(){    SpawnIterator(DoStart);    }private IEnumerator&lt;ITask&gt; DoStart(){    DispatcherQueue queue = new DispatcherQueue();    this._wpfServicePort = wpf.WpfAdapter.Create(queue);    // invoke the UI    var runWindow = this._wpfServicePort.RunWindow(() =&gt; (Window)new Dashboard(this));    yield return (Choice)runWindow;    var exception = (Exception)runWindow;    if (exception != null)    {        LogError(exception);        StartFailed();        yield break;    }        // Subscribe to partners      var subscribe1 = this._nxtDrivePort.Subscribe(_nxtDriveNotify);    yield return (Choice)subscribe1;    _timerPort.Post(DateTime.Now);    // Activate independent tasks    Activate&lt;ITask&gt;(        Arbiter.Receive&lt;drive.DriveEncodersUpdate&gt;(true, _nxtDriveNotify, DriveEncoderHandler),        Arbiter.Receive(true, _timerPort, TimerHandler)    );    // Start operation handlers and insert into directory service.    StartHandlers();          }private void StartHandlers(){    // Activate message handlers for this service and insert into the directory.    base.Start();}Timerport is used to retrieve the battery information periodically.[ServiceHandler(ServiceHandlerBehavior.Exclusive)]public IEnumerator&lt;ITask&gt; TimerTickHandler(TimerTick incrementTick){    incrementTick.ResponsePort.Post(DefaultUpdateResponseType.Instance);    battery.Get batteryGet;    yield return _nxtBatteryPort.Get(GetRequestType.Instance, out batteryGet);    _nxtBatteryState = batteryGet.ResponsePort;    if (_nxtBatteryState != null)    {        BatteryPower = _nxtBatteryState.PercentBatteryPower;                  }            yield break;}void TimerHandler(DateTime signal){    _mainPort.Post(new TimerTick());    Activate(        Arbiter.Receive(false, TimeoutPort(3000),            delegate(DateTime time)            {                _timerPort.Post(time);            }        )    );}DriveEncoderUpdate to retrieve the information from the servo motors.private void DriveEncoderHandler(drive.DriveEncodersUpdate statistics){    LeftEncoderCurrent = statistics.Body.LeftEncoderCurrent;    RightEncoderCurrent = statistics.Body.RightEncoderCurrent;    LeftPowerCurrent = statistics.Body.LeftPowerCurrent;    RightPowerCurrent = statistics.Body.RightPowerCurrent;}Create an enum named “DriveAction” in the common class library project. This is to handle the keyboard or the click events from the UI Layer.public enum DriveAction{    Front,    Back,    Left,    Right,    Stop}Implement the Drive method in the service.public void Drive(DriveAction driveAction){    switch (driveAction)    {        case DriveAction.Front:            _nxtSetDriveRequest.LeftPower = -GearPower;            _nxtSetDriveRequest.RightPower = -GearPower;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Back:          _nxtSetDriveRequest.LeftPower = GearPower;            _nxtSetDriveRequest.RightPower = GearPower;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Left:            _nxtSetDriveRequest.LeftPower = -.4;            _nxtSetDriveRequest.RightPower = .4;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Right:              _nxtSetDriveRequest.LeftPower = .4;            _nxtSetDriveRequest.RightPower = -.4;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Stop:            _nxtDrivePort.AllStop(MotorStopState.Coast);            break;        default:            break;    }}I suppose I’ve explained most of the important parts in the service. Please let me know if you have any questions.",
            "content_html": "<h2 id=\"video\">Video</h2><p><a href=\"https://www.youtube.com/watch?v=YUXAIZXGfQk\"><img src=\"https://img.youtube.com/vi/YUXAIZXGfQk/0.jpg\" alt=\"LEGO Bot\" /></a></p><h2 id=\"source-code\">Source Code</h2><p>Here is the <a href=\"https://github.com/gokulm/LEGO.Bot\">GitHub Repository</a></p><h2 id=\"requirements\">Requirements:</h2><ul>  <li><a href=\"https://www.amazon.com/LEGO-Mindstorms-NXT-Discontinued-manufacturer/dp/B001V7RF9U\">LEGO Mindstorms NXT 2.0</a></li>  <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=29081\">Microsoft Robotics Developer Studio</a> (the link points to the latest version, please refer the code to the appropriate version)</li>  <li>Network/IP Camera (I used my iPhone with WiFi Camera app installed on it)</li>  <li>WPF Dashboard Controls</li></ul><h2 id=\"how-to-set-it-up\">How to set it up?</h2><p>Create a MRDS Service and add the partners - NxtDrive and NxtBattery.  Adding the partners will automatically declare and instantiate an object for BatteryOperations and an object for DriveOperations. Please add one more for DriveOperations as the code mentioned below.</p><pre><code>/// &lt;summary&gt;/// NxtBattery partner/// &lt;/summary&gt;[Partner(\"NxtBattery\", Contract = battery.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]battery.BatteryOperations _nxtBatteryPort = new battery.BatteryOperations();/// &lt;summary&gt;/// NxtDrive partner/// &lt;/summary&gt;[Partner(\"NxtDrive\", Contract = drive.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]drive.DriveOperations _nxtDrivePort = new drive.DriveOperations();drive.DriveOperations _nxtDriveNotify = new drive.DriveOperations();</code></pre><p>Add a new class library project to the solution, and add an interface to it. This project needs to be referenced in the MRDS Service and the WPF UI projects (will explain the UI project later).</p><pre><code>public interface IMyLegoCarService{    double GearPower { get; set; }    long LeftEncoderCurrent { get; set; }    long RightEncoderCurrent { get; set; }    double LeftPowerCurrent { get; set; }    double RightPowerCurrent { get; set; }    double BatteryPower { get; set; }    void Drive(DriveAction driveDirection);    void StopEngine();}</code></pre><p>Change the MRDS Service in such a way that it implements this interface. Values for all the properties but the first property (GearPower) will be set in the service, and they will be retrieved and used in the UI layer.</p><p>Now, add a new WPF project. VS will choose x86 as the targeted platform by default, change it to “Any CPU”. Declare a property named Service of type IMyLegoCarService, and add a constructor, something like this.</p><pre><code>public Dashboard(IMyLegoCarService service) : this(){    Service = service;    Service.GearPower = 0;    brsr_ipcamera.Navigate(new Uri(\"http://ipoftheiphoneorthewebserver/iphonecamera/index.htm\"));    UpdateInitialOdometer();    uiTimer = new DispatcherTimer();    uiTimer.Interval = TimeSpan.FromSeconds(1);    uiTimer.Tick += uiTimer_Tick;    uiTimer.Start();}</code></pre><p>This constructor should be called from the Service’s constructor, so that the service and the UI will be on the same thread. Here “brsr_ipcamera” is the web browser control to display the ip camera’s image/video (in my case my iphone). I added an html page to my webserver displaying only the video from the camera. Add a timer control to display the information retrieved from the service periodically. Here I’ve used WPF Dashboard Controls’ dial controls as speedometers (for left motor front, left motor reverse, right motor front and right motor reverse), odometer control as odometer and progress bar control as fuel gauge.  Left/Right Power Current properties were used to initialize the speedometers. Left/Right Encoder properties were used to initialize the odometer, these properties basically give us the degrees that the servo motors rotated. Using the formula: <strong>distance = Convert.ToInt32(Math.Abs(currentEncoderCurrent) / 360 * 2 * 3.14 * 0.75</strong>, we can calculate the distance covered. Here, pi = 3.14 and 0.75 is the radius of the wheels.</p><p><img src=\"https://github.com/gokulm/LEGO.Bot/blob/master/CropperCapture%5B5%5D_thumb.jpg\" alt=\"Screenshot\" /></p><p>Coming back to the service. Declare and/or instantiate the following classes.</p><pre><code>wpf.WpfServicePort _wpfServicePort;drive.SetDriveRequest _nxtSetDriveRequest = new drive.SetDriveRequest();battery.BatteryState _nxtBatteryState;</code></pre><p>WpfServicePort is used toinvoke the WPF UI, SetDriveRequest to rotate the motors and the BatteryState to get the battery information.</p><p>Add a port named “TimerTick” to the service types similar to the automatically created ports “Get”, “Subscribe” etc. Now your serviceoperations class declaration will be something like this -</p><pre><code>[ServicePort]public class MyLegoCarServiceOperations : PortSet&lt;DsspDefaultLookup, DsspDefaultDrop, Get, Subscribe, TimerTick&gt;{}public class TimerTick : Update&lt;TimerTickRequest, PortSet&lt;DefaultUpdateResponseType, Fault&gt;&gt;{    public TimerTick()        : base(new TimerTickRequest())    {    }} [DataContract]public class TimerTickRequest{}</code></pre><p>Modify the service’s start method something like this -</p><pre><code>protected override void Start(){    SpawnIterator(DoStart);    }private IEnumerator&lt;ITask&gt; DoStart(){    DispatcherQueue queue = new DispatcherQueue();    this._wpfServicePort = wpf.WpfAdapter.Create(queue);    // invoke the UI    var runWindow = this._wpfServicePort.RunWindow(() =&gt; (Window)new Dashboard(this));    yield return (Choice)runWindow;    var exception = (Exception)runWindow;    if (exception != null)    {        LogError(exception);        StartFailed();        yield break;    }        // Subscribe to partners      var subscribe1 = this._nxtDrivePort.Subscribe(_nxtDriveNotify);    yield return (Choice)subscribe1;    _timerPort.Post(DateTime.Now);    // Activate independent tasks    Activate&lt;ITask&gt;(        Arbiter.Receive&lt;drive.DriveEncodersUpdate&gt;(true, _nxtDriveNotify, DriveEncoderHandler),        Arbiter.Receive(true, _timerPort, TimerHandler)    );    // Start operation handlers and insert into directory service.    StartHandlers();          }private void StartHandlers(){    // Activate message handlers for this service and insert into the directory.    base.Start();}</code></pre><p>Timerport is used to retrieve the battery information periodically.</p><pre><code>[ServiceHandler(ServiceHandlerBehavior.Exclusive)]public IEnumerator&lt;ITask&gt; TimerTickHandler(TimerTick incrementTick){    incrementTick.ResponsePort.Post(DefaultUpdateResponseType.Instance);    battery.Get batteryGet;    yield return _nxtBatteryPort.Get(GetRequestType.Instance, out batteryGet);    _nxtBatteryState = batteryGet.ResponsePort;    if (_nxtBatteryState != null)    {        BatteryPower = _nxtBatteryState.PercentBatteryPower;                  }            yield break;}void TimerHandler(DateTime signal){    _mainPort.Post(new TimerTick());    Activate(        Arbiter.Receive(false, TimeoutPort(3000),            delegate(DateTime time)            {                _timerPort.Post(time);            }        )    );}</code></pre><p>DriveEncoderUpdate to retrieve the information from the servo motors.</p><pre><code>private void DriveEncoderHandler(drive.DriveEncodersUpdate statistics){    LeftEncoderCurrent = statistics.Body.LeftEncoderCurrent;    RightEncoderCurrent = statistics.Body.RightEncoderCurrent;    LeftPowerCurrent = statistics.Body.LeftPowerCurrent;    RightPowerCurrent = statistics.Body.RightPowerCurrent;}</code></pre><p>Create an enum named “DriveAction” in the common class library project. This is to handle the keyboard or the click events from the UI Layer.</p><pre><code>public enum DriveAction{    Front,    Back,    Left,    Right,    Stop}</code></pre><p>Implement the Drive method in the service.</p><pre><code>public void Drive(DriveAction driveAction){    switch (driveAction)    {        case DriveAction.Front:            _nxtSetDriveRequest.LeftPower = -GearPower;            _nxtSetDriveRequest.RightPower = -GearPower;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Back:          _nxtSetDriveRequest.LeftPower = GearPower;            _nxtSetDriveRequest.RightPower = GearPower;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Left:            _nxtSetDriveRequest.LeftPower = -.4;            _nxtSetDriveRequest.RightPower = .4;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Right:              _nxtSetDriveRequest.LeftPower = .4;            _nxtSetDriveRequest.RightPower = -.4;            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);            break;        case DriveAction.Stop:            _nxtDrivePort.AllStop(MotorStopState.Coast);            break;        default:            break;    }}</code></pre><p>I suppose I’ve explained most of the important parts in the service. Please let me know if you have any questions.</p>",
            "url": "/2010/11/05/lego-bot",
            
            
            
            "tags": ["robotics","C#",".NET","MRDS"],
            
            "date_published": "2010-11-05T00:00:00-05:00",
            "date_modified": "2010-11-05T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}