<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Gokulnath's Blogs</title>
 <link href="https://blogs.gokulnath.com/atom.xml" rel="self"/>
 <link href="https://blogs.gokulnath.com/"/>
 <updated>2020-06-06T11:42:25-05:00</updated>
 <id>https://blogs.gokulnath.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Markdown Based Blogging Website</title>
   <link href="https://blogs.gokulnath.com/2020/06/01/markdown-based-blogging-website"/>
   <updated>2020-06-01T00:00:00-05:00</updated>
   <id>https://blogs.gokulnath.com/2020/06/01/markdown-based-blogging-website</id>
   <content type="html">&lt;p&gt;After getting fond of &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown#:~:text=Markdown%20is%20a%20lightweight%20markup,same%20name%20only%20supports%20HTML.&quot;&gt;Markdown&lt;/a&gt; while documenting my open source project &lt;a href=&quot;https://github.com/gokulm/BoltOn&quot;&gt;BoltOn&lt;/a&gt;, decided to use a blogging engine based on Markdown.&lt;/p&gt;

&lt;p&gt;Did a basic research, and found out that &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to be the simplest one in terms of setup and maintenance.&lt;/p&gt;

&lt;p&gt;Set it up without installing Ruby and other things, but Docker, check out &lt;a href=&quot;https://medium.com/@sebagomez/setting-up-a-github-page-with-jekyll-and-a-docker-container-c712e448649b&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v /Users/gokul/gokulm.github.io:/srv/jekyll -p 4000:4000 -it jekyll/jekyll:builder bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://jamstackthemes.dev/theme/sidey-jekyll/&quot;&gt;theme&lt;/a&gt; I used.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LEGO Hexapod</title>
   <link href="https://blogs.gokulnath.com/2011/06/27/lego-hexapod"/>
   <updated>2011-06-27T00:00:00-05:00</updated>
   <id>https://blogs.gokulnath.com/2011/06/27/lego-hexapod</id>
   <content type="html">&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wgWyWG2s7wk&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/wgWyWG2s7wk/0.jpg&quot; alt=&quot;LEGO Bot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/gokulm/LEGO.HexaPod&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/LEGO-Mindstorms-NXT-Discontinued-manufacturer/dp/B001V7RF9U&quot;&gt;LEGO Mindstorms NXT 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=29081&quot;&gt;Microsoft Robotics Developer Studio&lt;/a&gt; (the link points to the latest version, please refer the code to the appropriate version)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the installation and setup, please refer to the previous posts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2010/09/04/how-to-create-dss-service&quot;&gt;How to create DSS Service?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2010/11/05/lego-bot&quot;&gt;Lego Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>LEGO Bot</title>
   <link href="https://blogs.gokulnath.com/2010/11/05/lego-bot"/>
   <updated>2010-11-05T00:00:00-05:00</updated>
   <id>https://blogs.gokulnath.com/2010/11/05/lego-bot</id>
   <content type="html">&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=YUXAIZXGfQk&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/YUXAIZXGfQk/0.jpg&quot; alt=&quot;LEGO Bot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/gokulm/LEGO.Bot&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/LEGO-Mindstorms-NXT-Discontinued-manufacturer/dp/B001V7RF9U&quot;&gt;LEGO Mindstorms NXT 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=29081&quot;&gt;Microsoft Robotics Developer Studio&lt;/a&gt; (the link points to the latest version, please refer the code to the appropriate version)&lt;/li&gt;
  &lt;li&gt;Network/IP Camera (I used my iPhone with WiFi Camera app installed on it)&lt;/li&gt;
  &lt;li&gt;WPF Dashboard Controls&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-set-it-up&quot;&gt;How to set it up?&lt;/h2&gt;
&lt;p&gt;Create a MRDS Service and add the partners - NxtDrive and NxtBattery.  Adding the partners will automatically declare and instantiate an object for BatteryOperations and an object for DriveOperations. Please add one more for DriveOperations as the code mentioned below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// NxtBattery partner
/// &amp;lt;/summary&amp;gt;
[Partner(&quot;NxtBattery&quot;, Contract = battery.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
battery.BatteryOperations _nxtBatteryPort = new battery.BatteryOperations();

/// &amp;lt;summary&amp;gt;
/// NxtDrive partner
/// &amp;lt;/summary&amp;gt;
[Partner(&quot;NxtDrive&quot;, Contract = drive.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
drive.DriveOperations _nxtDrivePort = new drive.DriveOperations();
drive.DriveOperations _nxtDriveNotify = new drive.DriveOperations();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a new class library project to the solution, and add an interface to it. This project needs to be referenced in the MRDS Service and the WPF UI projects (will explain the UI project later).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface IMyLegoCarService
{
    double GearPower { get; set; }

    long LeftEncoderCurrent { get; set; }
    long RightEncoderCurrent { get; set; }

    double LeftPowerCurrent { get; set; }
    double RightPowerCurrent { get; set; }

    double BatteryPower { get; set; }

    void Drive(DriveAction driveDirection);
    void StopEngine();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the MRDS Service in such a way that it implements this interface. Values for all the properties but the first property (GearPower) will be set in the service, and they will be retrieved and used in the UI layer.&lt;/p&gt;

&lt;p&gt;Now, add a new WPF project. VS will choose x86 as the targeted platform by default, change it to “Any CPU”. Declare a property named Service of type IMyLegoCarService, and add a constructor, something like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Dashboard(IMyLegoCarService service) : this()
{
    Service = service;
    Service.GearPower = 0;
    brsr_ipcamera.Navigate(new Uri(&quot;http://ipoftheiphoneorthewebserver/iphonecamera/index.htm&quot;));

    UpdateInitialOdometer();

    uiTimer = new DispatcherTimer();
    uiTimer.Interval = TimeSpan.FromSeconds(1);
    uiTimer.Tick += uiTimer_Tick;
    uiTimer.Start();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This constructor should be called from the Service’s constructor, so that the service and the UI will be on the same thread. Here “brsr_ipcamera” is the web browser control to display the ip camera’s image/video (in my case my iphone). I added an html page to my webserver displaying only the video from the camera. Add a timer control to display the information retrieved from the service periodically. Here I’ve used WPF Dashboard Controls’ dial controls as speedometers (for left motor front, left motor reverse, right motor front and right motor reverse), odometer control as odometer and progress bar control as fuel gauge.  Left/Right Power Current properties were used to initialize the speedometers. Left/Right Encoder properties were used to initialize the odometer, these properties basically give us the degrees that the servo motors rotated. Using the formula: &lt;strong&gt;distance = Convert.ToInt32(Math.Abs(currentEncoderCurrent) / 360 * 2 * 3.14 * 0.75&lt;/strong&gt;, we can calculate the distance covered. Here, pi = 3.14 and 0.75 is the radius of the wheels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/gokulm/LEGO.Bot/blob/master/CropperCapture%5B5%5D_thumb.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the service. Declare and/or instantiate the following classes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wpf.WpfServicePort _wpfServicePort;
drive.SetDriveRequest _nxtSetDriveRequest = new drive.SetDriveRequest();
battery.BatteryState _nxtBatteryState;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WpfServicePort is used toinvoke the WPF UI, SetDriveRequest to rotate the motors and the BatteryState to get the battery information.&lt;/p&gt;

&lt;p&gt;Add a port named “TimerTick” to the service types similar to the automatically created ports “Get”, “Subscribe” etc. Now your serviceoperations class declaration will be something like this -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ServicePort]
public class MyLegoCarServiceOperations : PortSet&amp;lt;DsspDefaultLookup, DsspDefaultDrop, Get, Subscribe, TimerTick&amp;gt;
{
}
public class TimerTick : Update&amp;lt;TimerTickRequest, PortSet&amp;lt;DefaultUpdateResponseType, Fault&amp;gt;&amp;gt;
{
    public TimerTick()
        : base(new TimerTickRequest())
    {
    }
}
 
[DataContract]
public class TimerTickRequest
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modify the service’s start method something like this -&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected override void Start()
{
    SpawnIterator(DoStart);    
}

private IEnumerator&amp;lt;ITask&amp;gt; DoStart()
{
    DispatcherQueue queue = new DispatcherQueue();

    this._wpfServicePort = wpf.WpfAdapter.Create(queue);

    // invoke the UI
    var runWindow = this._wpfServicePort.RunWindow(() =&amp;gt; (Window)new Dashboard(this));
    yield return (Choice)runWindow;

    var exception = (Exception)runWindow;
    if (exception != null)
    {
        LogError(exception);
        StartFailed();
        yield break;
    }    

    // Subscribe to partners  
    var subscribe1 = this._nxtDrivePort.Subscribe(_nxtDriveNotify);
    yield return (Choice)subscribe1;

    _timerPort.Post(DateTime.Now);

    // Activate independent tasks
    Activate&amp;lt;ITask&amp;gt;(
        Arbiter.Receive&amp;lt;drive.DriveEncodersUpdate&amp;gt;(true, _nxtDriveNotify, DriveEncoderHandler),
        Arbiter.Receive(true, _timerPort, TimerHandler)
    );

    // Start operation handlers and insert into directory service.
    StartHandlers();          
}

private void StartHandlers()
{
    // Activate message handlers for this service and insert into the directory.
    base.Start();

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Timerport is used to retrieve the battery information periodically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ServiceHandler(ServiceHandlerBehavior.Exclusive)]
public IEnumerator&amp;lt;ITask&amp;gt; TimerTickHandler(TimerTick incrementTick)
{
    incrementTick.ResponsePort.Post(DefaultUpdateResponseType.Instance);

    battery.Get batteryGet;
    yield return _nxtBatteryPort.Get(GetRequestType.Instance, out batteryGet);
    _nxtBatteryState = batteryGet.ResponsePort;
    if (_nxtBatteryState != null)
    {
        BatteryPower = _nxtBatteryState.PercentBatteryPower;              
    }        

    yield break;
}

void TimerHandler(DateTime signal)
{
    _mainPort.Post(new TimerTick());
    Activate(
        Arbiter.Receive(false, TimeoutPort(3000),
            delegate(DateTime time)
            {
                _timerPort.Post(time);
            }
        )
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DriveEncoderUpdate to retrieve the information from the servo motors.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void DriveEncoderHandler(drive.DriveEncodersUpdate statistics)
{
    LeftEncoderCurrent = statistics.Body.LeftEncoderCurrent;
    RightEncoderCurrent = statistics.Body.RightEncoderCurrent;
    LeftPowerCurrent = statistics.Body.LeftPowerCurrent;
    RightPowerCurrent = statistics.Body.RightPowerCurrent;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an enum named “DriveAction” in the common class library project. This is to handle the keyboard or the click events from the UI Layer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public enum DriveAction
{
    Front,
    Back,
    Left,
    Right,
    Stop
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Implement the Drive method in the service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void Drive(DriveAction driveAction)
{
    switch (driveAction)
    {
        case DriveAction.Front:
            _nxtSetDriveRequest.LeftPower = -GearPower;
            _nxtSetDriveRequest.RightPower = -GearPower;
            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);

            break;
        case DriveAction.Back:
          _nxtSetDriveRequest.LeftPower = GearPower;
            _nxtSetDriveRequest.RightPower = GearPower;
            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);
            break;
        case DriveAction.Left:
            _nxtSetDriveRequest.LeftPower = -.4;
            _nxtSetDriveRequest.RightPower = .4;
            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);

            break;
        case DriveAction.Right:
              _nxtSetDriveRequest.LeftPower = .4;
            _nxtSetDriveRequest.RightPower = -.4;
            _nxtDrivePort.DriveDistance(_nxtSetDriveRequest);
            break;
        case DriveAction.Stop:
            _nxtDrivePort.AllStop(MotorStopState.Coast);
            break;
        default:
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I suppose I’ve explained most of the important parts in the service. Please let me know if you have any questions.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Microsoft Robotics Developer Studio DSS Service</title>
   <link href="https://blogs.gokulnath.com/2010/09/04/how-to-create-dss-service"/>
   <updated>2010-09-04T00:00:00-05:00</updated>
   <id>https://blogs.gokulnath.com/2010/09/04/how-to-create-dss-service</id>
   <content type="html">&lt;p&gt;When I wanted to create my first robotics service, I had many difficulties and found very few resources over the internet for LEGO NXT 2.0 using Microsoft Robotics Developer Studion, so just thought of writing about it, especially the Decentralized Software Service (DSS).&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/LEGO-Mindstorms-NXT-Discontinued-manufacturer/dp/B001V7RF9U&quot;&gt;LEGO Mindstorms NXT 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=29081&quot;&gt;Microsoft Robotics Developer Studio&lt;/a&gt; (the link points to the latest version, please refer the code to the appropriate version)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Microsoft Robotics Studio can be used as a stand-alone development environment or it can be used with any of the Visual Studio 2008 or 2010 Editions, including the Express Editions.&lt;/p&gt;

&lt;h2 id=&quot;how-to-create-decentralized-software-service-dss&quot;&gt;How to create Decentralized Software Service (DSS)?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;After Installing Microsoft Robotics Studio, open Visual Studio IDE (I’m using 2010).&lt;/li&gt;
  &lt;li&gt;Click File/New Project, you should be able to see Microsoft Robotics under C# like this -&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/how-to-create-dss-service/screenshot1.jpg&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the project under Microsoft Robotics Studio installation folder (it will be mostly in c:\user\username\microsoft robotics dev studio 2008 r3), so that the common robotics dlls will be referenced properly.&lt;/li&gt;
  &lt;li&gt;Click OK and you will be allowed to enter your service name, namespace and other details. The most important thing is – you will be allowed to choose your partners from here -&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/how-to-create-dss-service/screenshot2.jpg&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Choose the partners one by one from the list and click “Add as partner”. Check the “Add notification port” checkbox and leave the Creation Policy as it is. Lego NXT Brick (v2) should be selected as one of the partners, and the other partners can be selected based on the sensors that you will be using. In case if you want to edit or delete any of the added partners, you can choose the partner from the partner dropdown and perform your actions. Once all the partners are selected, click OK.&lt;/li&gt;
  &lt;li&gt;You should be able to see the auto-generated code now. Build your solution.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-create-manifest-using-dss-manifest-editor&quot;&gt;How to create manifest using DSS Manifest Editor?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Open DSS Manifest Editor.&lt;/li&gt;
  &lt;li&gt;Choose your service from the left, drag and drop it on the editor. You should be able to see this -&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/how-to-create-dss-service/screenshot3.jpg&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search for your partners on the left, drag and drop on “Use service’s partner definition (UseExistingOrCreate)” boxes appropriately.&lt;/li&gt;
  &lt;li&gt;As the sensors in turn use the nxtbrick as their partner, another set of “Use service’s partner definition (UseExistingOrCreate)” boxes will be created for the brick.&lt;/li&gt;
  &lt;li&gt;You need to select nxtbrick service again and drop it on the boxes. If you see a pop like the one below, choose the already created service and NOT “Add a new instance”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/how-to-create-dss-service/screenshot4.jpg&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To configure the service, click it and then press “Create Initial State” button on the properties window. For the NxtBrick, you need to set the serial port number used for bluetooth connection. For the sensors, you need to set the ports appropriately.&lt;/li&gt;
  &lt;li&gt;Replace this manifest with the manifest created by the service.&lt;/li&gt;
  &lt;li&gt;To start the service execute &lt;strong&gt;dsshost /port:50000 /manifest:”C:\Users\username\Microsoft Robotics Dev Studio 2008 R3\MyDemoService\MyDemoService.manifest.xml”&lt;/strong&gt; in DSS Command Prompt.&lt;/li&gt;
  &lt;li&gt;You can also start the service from the DSS Control Panel. In order to view the control panel, start DSS Node and then go to http://localhost:50000 (default port is 50000, if you’ve changed it use it accordingly).&lt;/li&gt;
  &lt;li&gt;Switch ON your LEGO NXT 2.0 and then start the service. If everything is configured properly, you should be able to hear connecting sound from the NXT Brick.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Thirukkural/திருக்குறள்</title>
   <link href="https://blogs.gokulnath.com/2010/05/15/thirukkural"/>
   <updated>2010-05-15T00:00:00-05:00</updated>
   <id>https://blogs.gokulnath.com/2010/05/15/thirukkural</id>
   <content type="html">&lt;p&gt;Thirukural, written by Thiruvalluvar, in the form of couplets that convey noble thoughts. It is considered to be a book of ethics for the ordinary man, the administrator, the king and the ascetic. It is universal in perspective, and hence called “Ulaga Podhu Marai” meaning the Common Knowledge for the world. It is as timely today as when it was written more than 2000 years ago. &lt;a href=&quot;https://en.wikipedia.org/wiki/Tirukku%E1%B9%9Ba%E1%B8%B7&quot;&gt;Click here&lt;/a&gt; to know more about this book.&lt;/p&gt;

&lt;p&gt;It has been translated to 80 languages (including many Indian languages).  However, as far as I know only few people from India, other than from Tamil Nadu (a southern state in India) have known about or read this book. It is one of the reasons why I decided to build a website with English translation and transliteration … just an attempt to spread this book further, hope you will do the same.&lt;/p&gt;

&lt;p&gt;Check it out - &lt;a href=&quot;http://thirukkural.gokulnath.com&quot;&gt;http://thirukkural.gokulnath.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgements:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Took most of the content from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/thirukkural/Tamil.pdf&quot;&gt;Tamil.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/thirukkural/English.pdf&quot;&gt;English.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/files/thirukkural/TamilMeaning.pdf&quot;&gt;TamilMeaning.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Used Azhagi for reverse-transliterations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vazhga Tamil!!&lt;/p&gt;
</content>
 </entry>
 

</feed>
